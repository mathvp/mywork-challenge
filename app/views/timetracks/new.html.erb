<div id="form-app">
  <% @timetrack.errors.full_messages.each do |msg| %>
    <p><%= msg %></p>
  <% end %>

  {{timeNow}}
  {{latitude}}
  {{longitude}}

  <%= form_for @timetrack, local: true, html: {'v-on:submit.stop': 'validatesForm', 'ref': 'form'} do |f| %>
    <%= f.label :user, 'Username' %>
    <%= f.text_field :user, 'v-model': 'username' %>
    <%= f.label :geofence_id, 'Geofence' %>
    <%= f.select(:geofence_id, nil, {}, { class: 'browser-default', 'v-model':'geofence' }) do %>
    <%= options_from_collection_for_select(@geofences, :id, :description) %>
    <% end %>
    <!--f.collection_select :geofence_id, @geofences || [], :id, :description, { prompt:'Select Geofence' }, { class: 'browser-default', 'v-model':'geofence' }%>-->
    <%= f.label :comment, 'Comment' %>
    <%= f.text_area :comment %>
    <%= f.hidden_field :latitude, 'v-model': 'latitude' %>
    <%= f.hidden_field :longitude, 'v-model': 'longitude' %>
    <%= f.submit 'Register' %>
  <% end %>
  <ul v-if="messages.length">
    <li v-for="(msg, index) in messages" :key="index">{{msg}}</li>
  </ul>
</div>


<script>
var formApp = new Vue({
  el: '#form-app',
  data: {
    username: '<%= @timetrack.user %>',
    geofence: '<%= @timetrack.geofence %>',
    latitude: null,
    longitude: null,
    messages: [],
    timeNow: '<%= Time.current.strftime('%H:%M:%S') %>',
    hoursNow: <%= Time.current.strftime('%H') %>,
    minNow: <%= Time.current.strftime('%M') %>,
    secNow: <%= Time.current.strftime('%S') %>
  },
  methods: {
    getUserPosition(){
      navigator.geolocation.getCurrentPosition(position => {
        this.latitude = position.coords.latitude
        this.longitude = position.coords.longitude
      })
    },
    validatesForm(e) {
      this.messages.length = 0;

      if(this.username.trim() == '') {
        this.messages.push('Username can\'t be blank')
      }

      if(!this.geofence) {
        this.messages.push('Please, select the Geofence')
      }

      if(!this.messages.length){
        return true
      }

      e.preventDefault()
    },
    //-----------------------------------------------------------------------------
    // Based on: https://www.w3schools.com/js/tryit.asp?filename=tryjs_timing_clock
    //-----------------------------------------------------------------------------
    startTime() {
      const newTime = new Date(`<%= Time.current.strftime('%B %d, %Y') %> ${this.hoursNow}:${this.minNow}:${this.secNow}`)

      let newHours   = this.adjustZeros( newTime.getHours()   )
      let newMinutes = this.adjustZeros( newTime.getMinutes() )
      let newSeconds = this.adjustZeros( newTime.getSeconds() )
      let todayDate  = `${newTime.getDate()}/${newTime.getMonth()}/${newTime.getFullYear()}`

      this.timeNow = `${todayDate} - ${newHours}:${newMinutes}:${newSeconds}`

      this.secNow += 1

      var t = setTimeout(this.startTime, 1000);
    },
    adjustZeros(i) {
      if (i < 10) {i = "0" + i}  // add zero in front of numbers < 10
      return i
    }
    //-----------------------------------------------------------------------------

  },
  mounted(){
    this.$nextTick(() => {
      this.startTime()
      //this.getUserPosition()
    })
  }
})

</script>


